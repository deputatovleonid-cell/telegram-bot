from flask import Flask, request, jsonify
from pydub import AudioSegment
from openai import OpenAI
import os
import requests
import tiktoken
import re
from datetime import datetime, timedelta

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key = "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"
)

bot_token = '7558130234:AAF2y4_Uq51jlyur7ZJ0U7OcHJxFeC5-WFw'
replit_url = 'https://c219359c-08f7-420e-bf35-f37c2e8bc484-00-2cd29q7115mi3.pike.replit.dev'

app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫
user_messages = {}
user_limits = {}
user_pro = {}  # {chat_id: datetime}
user_payment_pending = set()

SYSTEM_PROMPT = '''
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —ç–∫—Å–ø–µ—Ä—Ç –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –¥–µ–ª–æ–≤–æ–º –ø–æ–¥—Ö–æ–¥–µ.
–û—Ç–≤–µ—á–∞–π:
‚Äì –°—Ç—Ä–æ–≥–æ –ø–æ —Å—É—Ç–∏, –±–µ–∑ "–≤–æ–¥—ã"
‚Äì –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º (–µ—Å–ª–∏ –º–æ–∂–Ω–æ), –º–∞–∫—Å–∏–º—É–º 90 —Å–ª–æ–≤
‚Äì –ì—Ä–∞–º–æ—Ç–Ω–æ, –¥–µ–ª–æ–≤—ã–º –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
‚Äì –î–æ–±–∞–≤–ª—è–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞
‚Äì –í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –º—ã—Å–ª–∏ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –∏–ª–∏ –ü–û–î–ß–Å–†–ö–ò–í–ê–ù–ò–ï–ú
‚Äì –î–µ–ª–∞–π –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
‚Äì –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —É–∑–±–µ–∫—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
‚Äì –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ–ø–æ–ª–Ω—ã–π ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏
‚Äì –ù–∏–∫–∞–∫–æ–π –ª–∏—à–Ω–µ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏: –±–µ–∑ "—Ä–∞–¥ –ø–æ–º–æ—á—å", "–∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å", —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å
‚Äì –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –≤—ã–¥–∞–π —Å—Å—ã–ª–∫—É –ø–æ —Ç–µ–º–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫)
'''

@app.route('/')
def index():
    return '‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\nüí≥ –ö–∞—Ä—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: `8600 4904 6804 4854` (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)'

@app.route('/setup')
def setup():
    webhook_url = f'{replit_url}/webhook'
    response = requests.post(
        f'https://api.telegram.org/bot{bot_token}/setWebhook?url={webhook_url}'
    )
    return jsonify(response.json())

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()

    if "message" not in data and "callback_query" not in data:
        return jsonify({"status": "no message"})

    if "callback_query" in data:
        query = data["callback_query"]
        chat_id = query["message"]["chat"]["id"]
        message_id = query["message"]["message_id"]
        if query["data"] == "payment_sent":
            user_payment_pending.add(chat_id)
            send_message(chat_id, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")
        return jsonify({"status": "callback processed"})

    message = data["message"]
    chat_id = message["chat"]["id"]
    username = message["from"].get("username", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    if message.get("text") == "/start":
        today = datetime.now().date()
        user_limits.setdefault(chat_id, {})
        user_limits[chat_id].setdefault(today, 0)
        remaining = 2 - user_limits[chat_id][today]
        model_info = "GPT-4 (PRO)" if chat_id in user_pro and datetime.now() < user_pro[chat_id] else "GPT-3.5 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
        send_message(chat_id, f"üëã –ü—Ä–∏–≤–µ—Ç!\n\nüß† *–ú–æ–¥–µ–ª—å*: {model_info}\nüîÑ *–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤*: {remaining} –∏–∑ 2")
        return jsonify({"status": "start message"})

    if "voice" in message or "audio" in message:
        send_message(chat_id, "‚ùå –Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å *–∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç. üé§‚û°Ô∏èüí¨")
        return jsonify({"status": "voice ignored"})

    if "photo" in message:
        if chat_id in user_payment_pending:
            activation_date = datetime.now()
            expiration_date = activation_date + timedelta(days=30)
            user_pro[chat_id] = expiration_date
            user_payment_pending.remove(chat_id)

            send_message(chat_id, f"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ PRO –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\nüë§ @{username}\nüìÖ –° {activation_date.strftime('%d.%m.%Y')} –ø–æ {expiration_date.strftime('%d.%m.%Y')}\n\nüöÄ –î–æ—Å—Ç—É–ø –∫ GPT‚Äë4 –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–∫–ª—é—á—ë–Ω.")
        else:
            send_message_with_button(
                chat_id,
                "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –æ–Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –æ–ø–ª–∞—Ç–æ–π. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å PRO, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                [[{"text": "–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ", "callback_data": "payment_sent"}]]
            )
        return jsonify({"status": "photo processed"})

    if "text" in message:
        user_message = message["text"].strip()

        if chat_id not in user_pro or datetime.now() > user_pro[chat_id]:
            today = datetime.now().date()
            user_limits.setdefault(chat_id, {})
            user_limits[chat_id].setdefault(today, 0)
            if user_limits[chat_id][today] >= 2:
                send_message_with_button(
                    chat_id,
                    "*‚ú® –ë–µ—Å–ø–ª–∞—Ç–Ω–æ*: –¥–æ 2 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å —Å GPT‚Äë3.5\nüöÄ *PRO‚Äë–ø–æ–¥–ø–∏—Å–∫–∞*: 15‚ÄØ000‚ÄØ—Å—É–º/–º–µ—Å ‚Äî GPT‚Äë4 –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤\n\nüëâ –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å *PRO‚Äë—Ä–µ–∂–∏–º*:\n1. –ü–µ—Ä–µ–≤–µ–¥–∏ 15‚ÄØ000‚ÄØ—Å—É–º –Ω–∞ –∫–∞—Ä—Ç—É:\n\n`8600 4904 6804 4854` *(–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)*\n\n2. –û—Ç–ø—Ä–∞–≤—å *–∫–≤–∏—Ç–∞–Ω—Ü–∏—é* (—Ñ–æ—Ç–æ) —Å—é–¥–∞\n3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è",
                    [[{"text": "–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ", "callback_data": "payment_sent"}]]
                )
                return jsonify({"status": "limit reached"})
            user_limits[chat_id][today] += 1
            model_name = "deepseek/deepseek-chat"
            remaining = 2 - user_limits[chat_id][today]
            send_message(chat_id, f"üß† *GPT‚Äë3.5* (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\nüîÑ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining} –∏–∑ 2")
        else:
            model_name = "deepseek/deepseek-chat"

        try:
            completion = client.chat.completions.create(
                model=model_name,
                messages=[
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": user_message}
                ]
            )

            reply = completion.choices[0].message.content
            reply = format_reply(reply)
            send_message(chat_id, reply)

        except Exception as e:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    return jsonify({"status": "ok"})

def send_message(chat_id, text):
    return requests.post(
        f'https://api.telegram.org/bot{bot_token}/sendMessage',
        data={
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown'
        }
    )

def send_message_with_button(chat_id, text, buttons):
    return requests.post(
        f'https://api.telegram.org/bot{bot_token}/sendMessage',
        json={
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown',
            'reply_markup': {
                'inline_keyboard': buttons
            }
        }
    )

def num_tokens_from_messages(messages, model="gpt-3.5-turbo"):
    try:
        encoding = tiktoken.encoding_for_model(model)
    except KeyError:
        encoding = tiktoken.get_encoding("cl100k_base")

    num_tokens = 0
    for message in messages:
        num_tokens += 4
        for key, value in message.items():
            num_tokens += len(encoding.encode(value))
            if key == "name":
                num_tokens -= 1
    num_tokens += 2
    return num_tokens

def format_reply(text):
    words = text.split()
    if len(words) > 90:
        text = ' '.join(words[:90]) + '...'
    text = text.replace("**", "*").replace("_", "_")
    return text

app.run(host='0.0.0.0', port=81)