from flask import Flask, request, jsonify
from openai import OpenAI
import requests
import os
import tiktoken
from datetime import datetime, timedelta

# üîê API –∫–ª—é—á–∏
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key="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"
)

bot_token = "7558130234:AAF2y4_Uq51jlyur7ZJ0U7OcHJxFeC5-WFw"
replit_url = "https://telegram-bot-pr1u.onrender.com"

app = Flask(__name__)

user_limits = {}
user_pro = {}
user_payment_pending = set()

SYSTEM_PROMPT = '''
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —ç–∫—Å–ø–µ—Ä—Ç –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –¥–µ–ª–æ–≤–æ–º –ø–æ–¥—Ö–æ–¥–µ.
–û—Ç–≤–µ—á–∞–π:
‚Äì –°—Ç—Ä–æ–≥–æ –ø–æ —Å—É—Ç–∏, –±–µ–∑ "–≤–æ–¥—ã"
‚Äì –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º (–µ—Å–ª–∏ –º–æ–∂–Ω–æ), –º–∞–∫—Å–∏–º—É–º 90 —Å–ª–æ–≤
‚Äì –ì—Ä–∞–º–æ—Ç–Ω–æ, –¥–µ–ª–æ–≤—ã–º –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
‚Äì –î–æ–±–∞–≤–ª—è–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞
‚Äì –í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –º—ã—Å–ª–∏ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –∏–ª–∏ –ü–û–î–ß–Å–†–ö–ò–í–ê–ù–ò–ï–ú
‚Äì –î–µ–ª–∞–π –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
‚Äì –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —É–∑–±–µ–∫—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
‚Äì –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ–ø–æ–ª–Ω—ã–π ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏
‚Äì –ù–∏–∫–∞–∫–æ–π –ª–∏—à–Ω–µ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏: –±–µ–∑ "—Ä–∞–¥ –ø–æ–º–æ—á—å", "–∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å", —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å
‚Äì –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –≤—ã–¥–∞–π —Å—Å—ã–ª–∫—É –ø–æ —Ç–µ–º–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫)
'''

@app.route('/')
def index():
    return '‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. Webhook –∞–∫—Ç–∏–≤–µ–Ω.'

@app.route('/setup')
def setup():
    webhook_url = f'{replit_url}/webhook'
    r = requests.post(f'https://api.telegram.org/bot{bot_token}/setWebhook?url={webhook_url}')
    return jsonify(r.json())

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()

    if "message" not in data and "callback_query" not in data:
        return jsonify({"status": "no message"})

    if "callback_query" in data:
        query = data["callback_query"]
        chat_id = query["message"]["chat"]["id"]
        message_id = query["message"]["message_id"]
        if query["data"] == "payment_sent":
            user_payment_pending.add(chat_id)
            send_message(chat_id, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")
        return jsonify({"status": "callback processed"})

    message = data["message"]
    chat_id = message["chat"]["id"]
    username = message["from"].get("username", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    if "text" in message and message["text"] == "/start":
        today = datetime.now().date()
        user_limits.setdefault(chat_id, {}).setdefault(today, 0)
        remaining = 2 - user_limits[chat_id][today]
        model_info = "GPT-4 (PRO)" if chat_id in user_pro and datetime.now() < user_pro[chat_id] else "GPT-3.5 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
        send_message(chat_id, f"üëã –ü—Ä–∏–≤–µ—Ç!\n\nüß† *–ú–æ–¥–µ–ª—å*: {model_info}\nüîÑ *–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤*: {remaining} –∏–∑ 2")
        return jsonify({"status": "start message"})

    if "photo" in message:
        if chat_id in user_payment_pending:
            activation = datetime.now()
            expiration = activation + timedelta(days=30)
            user_pro[chat_id] = expiration
            user_payment_pending.remove(chat_id)
            send_message(chat_id, f"‚úÖ *PRO –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n@{username}\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expiration.strftime('%d.%m.%Y')}")
        else:
            send_message_with_button(
                chat_id,
                "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –æ–Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –æ–ø–ª–∞—Ç–æ–π.",
                [[{"text": "–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ", "callback_data": "payment_sent"}]]
            )
        return jsonify({"status": "photo processed"})

    if "text" in message:
        text = message["text"].strip()

        # –ª–∏–º–∏—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        if chat_id not in user_pro or datetime.now() > user_pro[chat_id]:
            today = datetime.now().date()
            user_limits.setdefault(chat_id, {}).setdefault(today, 0)
            if user_limits[chat_id][today] >= 2:
                send_message_with_button(
                    chat_id,
                    "*‚ú® –ë–µ—Å–ø–ª–∞—Ç–Ω–æ*: 2 –∑–∞–ø—Ä–æ—Å–∞/–¥–µ–Ω—å —Å GPT‚Äë3.5\nüöÄ *PRO*: 15‚ÄØ000‚ÄØ—Å—É–º/–º–µ—Å ‚Äî GPT‚Äë4 –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤\n\n–ü–µ—Ä–µ–≤–µ–¥–∏ 15‚ÄØ000‚ÄØ—Å—É–º –Ω–∞ –∫–∞—Ä—Ç—É:\n\n`8600 4904 6804 4854`\n\n–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è",
                    [[{"text": "–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ", "callback_data": "payment_sent"}]]
                )
                return jsonify({"status": "limit reached"})
            user_limits[chat_id][today] += 1
            model = "deepseek/deepseek-chat"
        else:
            model = "openchat/openchat-3.5-1210"

        try:
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": text}
                ]
            )
            reply = format_reply(response.choices[0].message.content)
            send_message(chat_id, reply)
        except Exception as e:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    return jsonify({"status": "ok"})

def send_message(chat_id, text):
    requests.post(
        f'https://api.telegram.org/bot{bot_token}/sendMessage',
        data={'chat_id': chat_id, 'text': text, 'parse_mode': 'Markdown'}
    )

def send_message_with_button(chat_id, text, buttons):
    requests.post(
        f'https://api.telegram.org/bot{bot_token}/sendMessage',
        json={
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'Markdown',
            'reply_markup': {'inline_keyboard': buttons}
        }
    )

def format_reply(text):
    words = text.split()
    if len(words) > 90:
        text = ' '.join(words[:90]) + '...'
    return text.replace("**", "*").replace("_", "_")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=81)
